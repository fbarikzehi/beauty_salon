// <auto-generated />
using System;
using Beauty.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Beauty.Persistence.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20201115112706_003")]
    partial class _003
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Beauty.Model.Account.Permission.PermissionActionModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("PermissionId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionActions","Account");
                });

            modelBuilder.Entity("Beauty.Model.Account.Permission.PermissionModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<short?>("SubPermissionId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubPermissionId");

                    b.ToTable("Permissions","Account");
                });

            modelBuilder.Entity("Beauty.Model.Account.Role.RoleModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HomeUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PersianTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles","Account");
                });

            modelBuilder.Entity("Beauty.Model.Account.Role.RolePermissionActionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("PermissionActionId")
                        .HasColumnType("smallint");

                    b.Property<short?>("PermissionActionModelId")
                        .HasColumnType("smallint");

                    b.Property<int>("RolePermissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionActionModelId");

                    b.HasIndex("RolePermissionId");

                    b.ToTable("RolePermissionActions","Account");
                });

            modelBuilder.Entity("Beauty.Model.Account.Role.RolePermissionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("PermissionId")
                        .HasColumnType("smallint");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions","Account");
                });

            modelBuilder.Entity("Beauty.Model.Account.User.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateSmsDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InitialUserChange")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LockDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LockExpirationDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Secret")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users","Account");
                });

            modelBuilder.Entity("Beauty.Model.Account.User.UserRoleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasAlternateKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles","Account");
                });

            modelBuilder.Entity("Beauty.Model.Application.Setting.SettingModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Setting","Application");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreateDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateUser = new Guid("00000000-0000-0000-0000-000000000000"),
                            IsDeleted = false,
                            Version = "دمو 0.1"
                        });
                });

            modelBuilder.Entity("Beauty.Model.Appointment.AppointmentDiscountModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Discounts","Appointment");
                });

            modelBuilder.Entity("Beauty.Model.Appointment.AppointmentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("FollowingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.ToTable("Appointments","Appointment");
                });

            modelBuilder.Entity("Beauty.Model.Appointment.AppointmentPaymentModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.ToTable("Payment","Appointment");
                });

            modelBuilder.Entity("Beauty.Model.Appointment.AppointmentServiceDetailModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentServiceId")
                        .HasColumnType("int");

                    b.Property<float>("Count")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<short>("ServiceDetailId")
                        .HasColumnType("smallint");

                    b.Property<short?>("ServiceDetailModelId")
                        .HasColumnType("smallint");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentServiceId");

                    b.HasIndex("ServiceDetailModelId");

                    b.ToTable("AppointmentServiceDetails","Appointment");
                });

            modelBuilder.Entity("Beauty.Model.Appointment.AppointmentServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DoneDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DonePersonnelProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PersonnelProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("ServiceId")
                        .HasColumnType("smallint");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DonePersonnelProfileId");

                    b.HasIndex("PersonnelProfileId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices","Appointment");
                });

            modelBuilder.Entity("Beauty.Model.Customer.CustomerChequeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("BankId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Fee")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CustomerProfileId");

                    b.ToTable("Cheques","Customer");
                });

            modelBuilder.Entity("Beauty.Model.Customer.CustomerContactModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CustomerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerProfileId");

                    b.ToTable("Contacts","Customer");
                });

            modelBuilder.Entity("Beauty.Model.Customer.CustomerProfileModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles","Customer");
                });

            modelBuilder.Entity("Beauty.Model.Financial.FinancialYearModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FinancialYears","Financial");
                });

            modelBuilder.Entity("Beauty.Model.Line.LineModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Lines","Line");
                });

            modelBuilder.Entity("Beauty.Model.Line.LinePersonnelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("LineId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PersonnelProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("PersonnelProfileId");

                    b.ToTable("LinePersonnels","Line");
                });

            modelBuilder.Entity("Beauty.Model.Personnel.PersonnelAttendanceModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonnelProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelProfileId");

                    b.ToTable("Attendances","Personnel");
                });

            modelBuilder.Entity("Beauty.Model.Personnel.PersonnelContactModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonnelProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelProfileId");

                    b.ToTable("Contacts","Personnel");
                });

            modelBuilder.Entity("Beauty.Model.Personnel.PersonnelProfileModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("CooperationType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JobEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("JobStart")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Salary")
                        .HasColumnType("real");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles","Personnel");
                });

            modelBuilder.Entity("Beauty.Model.Personnel.PersonnelServiceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float?>("Percentage")
                        .HasColumnType("real");

                    b.Property<Guid>("PersonnelProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("ServiceId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelProfileId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Services","Personnel");
                });

            modelBuilder.Entity("Beauty.Model.Personnel.PersonnelWorkingTimeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PersonnelProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("PersonnelProfileId");

                    b.ToTable("WorkingTime","Personnel");
                });

            modelBuilder.Entity("Beauty.Model.Product.ProductImageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServerPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages","Product");
                });

            modelBuilder.Entity("Beauty.Model.Product.ProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Products","Product");
                });

            modelBuilder.Entity("Beauty.Model.Salon.SalonContactModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Contacts","Salon");
                });

            modelBuilder.Entity("Beauty.Model.Salon.SalonModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AppointmentPrePayment")
                        .HasColumnType("bit");

                    b.Property<float>("AppointmentPrePaymentPerecnt")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("AppointmentRemindingSmsSendTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("DefaultPersonnelServicePerecnt")
                        .HasColumnType("real");

                    b.Property<int>("EstablishYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.Property<float>("OvertimePay")
                        .HasColumnType("real");

                    b.Property<float>("PersonnelToPersonnelSalePerecnt")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Salons","Salon");
                });

            modelBuilder.Entity("Beauty.Model.Salon.SalonWorkingDateTimeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("FromTime")
                        .HasColumnType("time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("ToTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("WorkingDateTimes","Salon");
                });

            modelBuilder.Entity("Beauty.Model.Service.ServiceCustomerRatingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<short>("ServiceId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("CustomerRatings","Service");
                });

            modelBuilder.Entity("Beauty.Model.Service.ServiceDetailModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<short>("ServiceId")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Details","Service");
                });

            modelBuilder.Entity("Beauty.Model.Service.ServiceModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("DurationMinutes")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("LineId")
                        .HasColumnType("smallint");

                    b.Property<float>("Prepayment")
                        .HasColumnType("real");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("TakeItFreeCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Services","Service");
                });

            modelBuilder.Entity("Beauty.Model.Service.ServicePackageItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AfterDiscountPrice")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("ServiceId")
                        .HasColumnType("smallint");

                    b.Property<int>("ServicePackageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServicePackageId");

                    b.ToTable("ServicePackageItems","Service");
                });

            modelBuilder.Entity("Beauty.Model.Service.ServicePackageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("DiscountPrice")
                        .HasColumnType("real");

                    b.Property<DateTime?>("ExtendTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServicePackages","Service");
                });

            modelBuilder.Entity("Beauty.Model.Service.ServicePriceModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<short>("ServiceId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ToDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Prices","Service");
                });

            modelBuilder.Entity("Beauty.Model.Setting.BankModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Banks","Setting");
                });

            modelBuilder.Entity("Beauty.Model.Setting.CalendarDateModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CalendarId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("HolidayType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<string>("Occasion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("CalendarDates","Setting");
                });

            modelBuilder.Entity("Beauty.Model.Setting.CalendarModel", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("Year")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Calendars","Setting");
                });

            modelBuilder.Entity("Beauty.Model.Setting.UnitModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Units","Setting");
                });

            modelBuilder.Entity("Beauty.Model.Sms.SmsHistoryModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReceptorNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Histories","Sms");
                });

            modelBuilder.Entity("Beauty.Model.Sms.SmsMessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AfterHours")
                        .HasColumnType("int");

                    b.Property<bool>("AllowSend")
                        .HasColumnType("bit");

                    b.Property<int>("BeforeHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreateUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemMessage")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverType")
                        .HasColumnType("int");

                    b.Property<int>("SystemMessageType")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages","Sms");
                });

            modelBuilder.Entity("Beauty.Model.Sms.SmsMessageParameterModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Index")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SmsMessageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmsMessageId");

                    b.ToTable("MessageParameters","Sms");
                });

            modelBuilder.Entity("Beauty.Model.Sms.SmsMessageSendScheduleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalendarDateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SmsMessageId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CalendarDateId");

                    b.HasIndex("SmsMessageId");

                    b.ToTable("MessageSendSchedules","Sms");
                });

            modelBuilder.Entity("Beauty.Model.Account.Permission.PermissionActionModel", b =>
                {
                    b.HasOne("Beauty.Model.Account.Permission.PermissionModel", "Permission")
                        .WithMany("Actions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Account.Permission.PermissionModel", b =>
                {
                    b.HasOne("Beauty.Model.Account.Permission.PermissionModel", "SubPermission")
                        .WithMany("SubPermissions")
                        .HasForeignKey("SubPermissionId");
                });

            modelBuilder.Entity("Beauty.Model.Account.Role.RolePermissionActionModel", b =>
                {
                    b.HasOne("Beauty.Model.Account.Permission.PermissionActionModel", null)
                        .WithMany("RolePermissionActions")
                        .HasForeignKey("PermissionActionModelId");

                    b.HasOne("Beauty.Model.Account.Role.RolePermissionModel", "RolePermission")
                        .WithMany("RolePermissionActions")
                        .HasForeignKey("RolePermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Account.Role.RolePermissionModel", b =>
                {
                    b.HasOne("Beauty.Model.Account.Permission.PermissionModel", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty.Model.Account.Role.RoleModel", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Account.User.UserRoleModel", b =>
                {
                    b.HasOne("Beauty.Model.Account.Role.RoleModel", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty.Model.Account.User.UserModel", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Appointment.AppointmentDiscountModel", b =>
                {
                    b.HasOne("Beauty.Model.Appointment.AppointmentModel", "Appointment")
                        .WithMany("Discounts")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Appointment.AppointmentModel", b =>
                {
                    b.HasOne("Beauty.Model.Customer.CustomerProfileModel", "CustomerProfile")
                        .WithMany()
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Appointment.AppointmentPaymentModel", b =>
                {
                    b.HasOne("Beauty.Model.Appointment.AppointmentModel", "Appointment")
                        .WithMany("Payments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Appointment.AppointmentServiceDetailModel", b =>
                {
                    b.HasOne("Beauty.Model.Appointment.AppointmentServiceModel", "AppointmentService")
                        .WithMany("AppointmentServiceDetails")
                        .HasForeignKey("AppointmentServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty.Model.Service.ServiceDetailModel", null)
                        .WithMany("AppointmentServiceDetails")
                        .HasForeignKey("ServiceDetailModelId");
                });

            modelBuilder.Entity("Beauty.Model.Appointment.AppointmentServiceModel", b =>
                {
                    b.HasOne("Beauty.Model.Appointment.AppointmentModel", "Appointment")
                        .WithMany("Services")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty.Model.Personnel.PersonnelProfileModel", "DonePersonnelProfile")
                        .WithMany()
                        .HasForeignKey("DonePersonnelProfileId");

                    b.HasOne("Beauty.Model.Personnel.PersonnelProfileModel", "PersonnelProfile")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("PersonnelProfileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Beauty.Model.Service.ServiceModel", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Customer.CustomerChequeModel", b =>
                {
                    b.HasOne("Beauty.Model.Setting.BankModel", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty.Model.Customer.CustomerProfileModel", "CustomerProfile")
                        .WithMany("CustomerCheques")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Customer.CustomerContactModel", b =>
                {
                    b.HasOne("Beauty.Model.Customer.CustomerProfileModel", "CustomerProfile")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Customer.CustomerProfileModel", b =>
                {
                    b.HasOne("Beauty.Model.Account.User.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Beauty.Model.Line.LinePersonnelModel", b =>
                {
                    b.HasOne("Beauty.Model.Line.LineModel", "Line")
                        .WithMany("LinePersonnels")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty.Model.Personnel.PersonnelProfileModel", "PersonnelProfile")
                        .WithMany("LinePersonnels")
                        .HasForeignKey("PersonnelProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Personnel.PersonnelAttendanceModel", b =>
                {
                    b.HasOne("Beauty.Model.Personnel.PersonnelProfileModel", "PersonnelProfile")
                        .WithMany("Attendances")
                        .HasForeignKey("PersonnelProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Personnel.PersonnelContactModel", b =>
                {
                    b.HasOne("Beauty.Model.Personnel.PersonnelProfileModel", "PersonnelProfile")
                        .WithMany("Contacts")
                        .HasForeignKey("PersonnelProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Personnel.PersonnelProfileModel", b =>
                {
                    b.HasOne("Beauty.Model.Account.User.UserModel", "User")
                        .WithMany("PersonnelProfiles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Beauty.Model.Personnel.PersonnelServiceModel", b =>
                {
                    b.HasOne("Beauty.Model.Personnel.PersonnelProfileModel", "PersonnelProfile")
                        .WithMany("Services")
                        .HasForeignKey("PersonnelProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty.Model.Service.ServiceModel", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Personnel.PersonnelWorkingTimeModel", b =>
                {
                    b.HasOne("Beauty.Model.Personnel.PersonnelProfileModel", "PersonnelProfile")
                        .WithMany("WorkingTimes")
                        .HasForeignKey("PersonnelProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Product.ProductImageModel", b =>
                {
                    b.HasOne("Beauty.Model.Product.ProductModel", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Product.ProductModel", b =>
                {
                    b.HasOne("Beauty.Model.Setting.UnitModel", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Salon.SalonContactModel", b =>
                {
                    b.HasOne("Beauty.Model.Salon.SalonModel", "Salon")
                        .WithMany("Contacts")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Salon.SalonWorkingDateTimeModel", b =>
                {
                    b.HasOne("Beauty.Model.Salon.SalonModel", "Salon")
                        .WithMany("WorkingDateTimes")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Service.ServiceCustomerRatingModel", b =>
                {
                    b.HasOne("Beauty.Model.Customer.CustomerProfileModel", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty.Model.Service.ServiceModel", "Service")
                        .WithMany("ServiceRatings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Service.ServiceDetailModel", b =>
                {
                    b.HasOne("Beauty.Model.Service.ServiceModel", "Service")
                        .WithMany("Details")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Service.ServiceModel", b =>
                {
                    b.HasOne("Beauty.Model.Line.LineModel", "Line")
                        .WithMany("Services")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Service.ServicePackageItemModel", b =>
                {
                    b.HasOne("Beauty.Model.Service.ServiceModel", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty.Model.Service.ServicePackageModel", "ServicePackage")
                        .WithMany("Items")
                        .HasForeignKey("ServicePackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Service.ServicePriceModel", b =>
                {
                    b.HasOne("Beauty.Model.Service.ServiceModel", "Service")
                        .WithMany("Prices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Setting.CalendarDateModel", b =>
                {
                    b.HasOne("Beauty.Model.Setting.CalendarModel", "Calendar")
                        .WithMany("CalendarDates")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Sms.SmsMessageParameterModel", b =>
                {
                    b.HasOne("Beauty.Model.Sms.SmsMessageModel", "SmsMessage")
                        .WithMany("Parameters")
                        .HasForeignKey("SmsMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Beauty.Model.Sms.SmsMessageSendScheduleModel", b =>
                {
                    b.HasOne("Beauty.Model.Setting.CalendarDateModel", "CalendarDate")
                        .WithMany()
                        .HasForeignKey("CalendarDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Beauty.Model.Sms.SmsMessageModel", "SmsMessage")
                        .WithMany("SendSchedules")
                        .HasForeignKey("SmsMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
